{"version":3,"sources":["firebase.js","store/UserProvider.js","components/Header/Header.js","testDB.js","components/MemeGenerator/subcomponents/Form.js","components/MemeGenerator/subcomponents/Meme.js","components/MemeGenerator/subcomponents/Images.js","components/MemeGenerator/MemeGenerator.js","components/PortalPages/HomePage.js","components/Content/Content.js","img/Splash/loading.gif","components/Content/SplashScreen.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","provider","firestore","GoogleAuthProvider","UserContext","createContext","user","UserProvider","children","useState","setUser","useEffect","onAuthStateChanged","userAuth","Provider","value","list","name","path","exact","Header","useContext","menu","map","element","to","className","onClick","signOut","signInWithPopup","database","Form","upperValue","bottomValue","textSize","handleChange","type","placeholder","onChange","Meme","selectedImage","width","height","bottomText","setBottomText","upperText","setUpperText","setTextSize","upperX","setUpperX","upperY","setUpperY","bottomX","setBottomX","bottomY","setBottomY","isGrabbed","setIsGrabbed","handleMouseMove","useCallback","e","rect","document","getElementById","getBoundingClientRect","offsetX","clientX","left","offsetY","clientY","top","target","id","handleMouseDown","handleMouseUp","addEventListener","removeEventListener","manageMeme","svg","svgData","XMLSerializer","serializeToString","canvas","createElement","setAttribute","svgSize","img","btoa","unescape","encodeURIComponent","onload","getContext","drawImage","canvasdata","toDataURL","a","download","href","body","appendChild","click","newMeme","length","url","likes","push","actionOnMeme","textStyle","fontFamily","textTransform","fill","stroke","userSelect","alert","xmlns","xmlnsXlink","xlinkHref","style","fontSize","x","y","dominantBaseline","textAnchor","onMouseDown","onMouseUp","Images","allMemeImg","selectImg","allImages","data-url","MemeGenerator","setSelectedImage","setAllMemeImg","selectedImageWidth","setSelectedImageWidth","selectedImageHeight","setSelectedImageHeight","fetch","then","response","json","memes","data","dataset","base64img","baseImage","Image","src","crossOrigin","wrh","dataURL","querySelector","scrollIntoView","behavior","HomePage","postedMemes","setPostedMemes","slice","reverse","meme","alt","Content","console","log","uid","component","render","SplashScreen","backgroundColor","loading","position","transform","App","isLoading","setIsLoading","setTimeout","basename","process","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","URL","origin","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"4TAcAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIZ,IAAMC,EAAOT,IAASS,OAGvBC,GAFmBV,IAASW,YAEjB,IAAIX,IAASS,KAAKG,oBCftBC,EAAcC,wBAAc,CAAEC,KAAM,OAgBlCC,EAdM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACXC,mBAAS,MADE,mBAC5BH,EAD4B,KACtBI,EADsB,KAOnC,OAJAC,qBAAU,WACNX,EAAKY,oBAAmB,SAAAC,GAAQ,OAAIH,EAAQG,QAC7C,IAGC,cAACT,EAAYU,SAAb,CAAsBC,MAAO,CAAET,QAA/B,SACKE,KCPPQ,G,MAAO,CACT,CAAEC,KAAM,QAASC,KAAM,IAAKC,OAAO,GACnC,CAAEF,KAAM,YAAaC,KAAM,aAC3B,CAAED,KAAM,YAAaC,KAAM,gBA+BhBE,EA5BA,WAAO,IACVd,EAASe,qBAAWjB,GAApBE,KAQFgB,EAAON,EAAKO,KAAI,SAAAC,GAAO,OACzB,6BAAuB,cAAC,IAAD,CAASC,GAAID,EAAQN,KAAMC,QAAOK,EAAQL,OAAQK,EAAQL,MAA1D,SAA0EK,EAAQP,QAAhGO,EAAQP,SAIrB,OACI,mCACI,wBAAQS,UAAU,MAAMC,QAbf,WACRrB,EAEEN,EAAK4B,UFEhB5B,EAAK6B,gBAAgB5B,IEQb,SAA4CK,EAAO,SAAW,wBAC9D,gDACA,qBAAKoB,UAAU,OAAf,SACI,+BACKJ,EACAhB,EAAO,6BAAkB,cAAC,IAAD,CAASmB,GAAG,WAAWN,OAAO,EAA9B,2BAAV,WAA6E,c,eChClGW,G,MAFA,ICmCAC,EA/BF,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,WAAYC,EAA0C,EAA1CA,YAAaC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAC/C,OACI,iCACI,+CACA,uBACA,uBACIC,KAAK,OACLnB,KAAK,YACLoB,YAAY,aACZtB,MAAOiB,EACPM,SAAUH,IAEd,uBACIC,KAAK,OACLnB,KAAK,aACLoB,YAAY,cACZtB,MAAOkB,EACPK,SAAUH,IAEd,uBACA,gDACA,uBACIC,KAAK,SACLnB,KAAK,WACLoB,YAAY,mBACZtB,MAAOmB,EACPI,SAAUH,QCsJXI,EA5KF,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAE1BpC,EAASe,qBAAWjB,GAApBE,KAFuC,EAMXG,mBAAS,IANE,mBAMxCkC,EANwC,KAM5BC,EAN4B,OAObnC,mBAAS,IAPI,mBAOxCoC,EAPwC,KAO7BC,EAP6B,OAQfrC,mBAAS,IARM,mBAQxCyB,EARwC,KAQ9Ba,EAR8B,OAUnBtC,mBAAS,OAVU,mBAUxCuC,EAVwC,KAUhCC,EAVgC,OAWnBxC,mBAAS,OAXU,mBAWxCyC,EAXwC,KAWhCC,EAXgC,OAYjB1C,mBAAS,OAZQ,mBAYxC2C,EAZwC,KAY/BC,EAZ+B,OAajB5C,mBAAS,OAbQ,mBAaxC6C,EAbwC,KAa/BC,EAb+B,OAeb9C,oBAAS,GAfI,mBAexC+C,EAfwC,KAe7BC,EAf6B,KAyCzCC,EAAkBC,uBAAY,SAACC,GACjC,GAAIJ,EAAW,CACX,IAAIK,EAAOC,SAASC,eAAe,YAAYC,wBACzCC,EAAUL,EAAEM,QAAUL,EAAKM,KAC3BC,EAAUR,EAAES,QAAUR,EAAKS,IACb,aAAhBV,EAAEW,OAAOC,IACTvB,EAAU,GAAD,OAAIgB,EAAJ,OACTd,EAAU,GAAD,OAAIiB,EAAJ,QACc,cAAhBR,EAAEW,OAAOC,KAChBnB,EAAW,GAAD,OAAIY,EAAJ,OACVV,EAAW,GAAD,OAAIa,EAAJ,WAGnB,CAACZ,IAGEiB,EAAkBd,uBAAY,WAChCF,GAAa,KACd,IAGGiB,EAAgBf,uBAAY,WAC9BF,GAAa,KACd,IAIH9C,qBAAU,WAGN,OAFI6C,GAAWM,SAASa,iBAAiB,YAAajB,GAE/C,WACHI,SAASc,oBAAoB,YAAalB,MAE/C,CAACA,EAAiBgB,EAAelB,IAIpC,IAmBMqB,EAAa,SAACjB,GAAO,IACfY,EAAOZ,EAAEW,OAATC,GACFM,EAAMhB,SAASC,eAAe,eAChCgB,GAAU,IAAIC,eAAgBC,kBAAkBH,GAC9CI,EAASpB,SAASqB,cAAc,UACtCD,EAAOE,aAAa,KAAM,UAC1B,IAAMC,EAAUP,EAAId,wBACpBkB,EAAOzC,MAAQ4C,EAAQ5C,MACvByC,EAAOxC,OAAS2C,EAAQ3C,OACxB,IAAM4C,EAAMxB,SAASqB,cAAc,OACnCG,EAAIF,aAAa,MAAO,6BAA+BG,KAAKC,SAASC,mBAAmBV,MACxFO,EAAII,OAAS,WACTR,EAAOS,WAAW,MAAMC,UAAUN,EAAK,EAAG,GAC1C,IAAMO,EAAaX,EAAOY,UAAU,cAhCvB,SAACtB,EAAIqB,GACtB,GAAW,aAAPrB,EAAmB,CACnB,IAAMuB,EAAIjC,SAASqB,cAAc,KACjCY,EAAEC,SAAW,WACbD,EAAEE,KAAOJ,EACT/B,SAASoC,KAAKC,YAAYJ,GAC1BA,EAAEK,aACC,GAAW,SAAP5B,EAAe,CAEtB,IAAM6B,EAAU,CACZ7B,GAAI1C,EAASwE,OACbC,IAAKV,EACLW,MAAO,GAEX1E,EAAS2E,KAAKJ,IAmBdK,CAAalC,EAAIqB,KAInBc,EAAY,CACdC,WAAY,SACZC,cAAe,YACfC,KAAM,OACNC,OAAQ,OACRC,WAAY,QAIhB,OACI,sBAAKtF,UAAU,UAAf,UACI,cAAC,EAAD,CAAMM,WAAYa,EAAWZ,YAAaU,EAAYT,SAAUA,EAAUC,aA1G7D,SAACyB,GAAO,IAAD,EACAA,EAAEW,OAAlBtD,EADgB,EAChBA,KAAMF,EADU,EACVA,MAEd,OAAQE,GACJ,IAAK,YACD6B,EAAa/B,GACb,MACJ,IAAK,aACD6B,EAAc7B,GACd,MACJ,IAAK,WACDgC,EAAYhC,GACZ,MACJ,QACIkG,MAAM,UAAD,OAAWhG,EAAX,4EA6FT,sBACIuD,GAAG,cACH/B,MAAOA,EACPC,OAAQA,EACRwE,MAAM,6BACNC,WAAW,+BALf,UAMI,uBACI3C,GAAG,WACH4C,UAAW5E,EACXE,OAAQA,EACRD,MAAOA,IAEX,sBACI+B,GAAG,WACH6C,MAAK,2BAAOV,GAAP,IAAkBW,SAAS,GAAD,OAAKpF,EAAL,QAC/BqF,EAAGvE,EACHwE,EAAGtE,EACHuE,iBAAiB,SACjBC,WAAW,SACXC,YAAalD,EACbmD,UAAWlD,EARf,SAUK7B,IAEL,sBACI2B,GAAG,YACH6C,MAAK,2BAAOV,GAAP,IAAkBW,SAAS,GAAD,OAAKpF,EAAL,QAC/BqF,EAAGnE,EACHoE,EAAGlE,EACHmE,iBAAiB,SACjBC,WAAW,SACXC,YAAalD,EACbmD,UAAWlD,EARf,SAUK/B,OAGT,uBACA,wBAAQ6B,GAAG,WAAW7C,QAASkD,EAA/B,2BACA,uBACEvE,EAAO,wBAAQkE,GAAG,OAAO7C,QAASkD,EAA3B,uBAA4D,SCnKlEgD,EAVA,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,UACpBC,EAAYF,EAAWvG,KAAI,SAAA+D,GAAG,OAAI,mBAAG5D,UAAU,kBAA+BC,QAASoG,EAAWE,WAAU3C,EAAIiB,IAA9E,SAAoFjB,EAAIrE,MAApDqE,EAAId,OAEhF,OACI,8BACKsD,EAAWxB,OAAS,EAAI0B,EAAY,4DC6ClCE,EA/CO,WAAO,IAAD,EACkBzH,mBAAS,IAD3B,mBACjB+B,EADiB,KACF2F,EADE,OAEY1H,mBAAS,IAFrB,mBAEjBqH,EAFiB,KAELM,EAFK,OAI4B3H,mBAAS,IAJrC,mBAIjB4H,EAJiB,KAIGC,EAJH,OAK8B7H,mBAAS,IALvC,mBAKjB8H,EALiB,KAKIC,EALJ,KAOxB7H,qBAAU,WACN8H,MAAM,qCACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACPE,EAAUF,EAASG,KAAnBD,MACRT,EAAcS,QAEvB,IAyBH,OACI,sBAAKnH,UAAU,UAAf,UACKc,GAAiB+F,EAAsB,cAAC,EAAD,CAAM/F,cAAeA,EAAeC,MAAO4F,EAAoB3F,OAAQ6F,IAA0B,KACzI,cAAC,EAAD,CAAQT,WAAYA,EAAYC,UAzBpB,SAACnE,GAAO,IAChB2C,EAAQ3C,EAAEW,OAAOwE,QAAjBxC,IACFyC,EAAYlF,SAASqB,cAAc,UACnC8D,EAAY,IAAIC,MACtBD,EAAUE,IAAM5C,EAChB0C,EAAUG,YAAc,YACxBH,EAAUvD,OAAS,WACf,IAAM2D,EAAMJ,EAAUxG,MAAQwG,EAAUvG,OACxCsG,EAAUvG,MAAQ,IAClBuG,EAAUtG,OAASsG,EAAUvG,MAAQ4G,EACzBL,EAAUrD,WAAW,MAC7BC,UAAUqD,EAAW,EAAG,EAAGD,EAAUvG,MAAOuG,EAAUtG,QAC1D,IAAM4G,EAAUN,EAAUlD,UAAU,aACpCqC,EAAiBmB,GACjBhB,EAAsB,GAAD,OAAIU,EAAUvG,MAAd,OACrB+F,EAAuB,GAAD,OAAIQ,EAAUtG,OAAd,OACPoB,SAASyF,cAAc,YAC/BC,eAAe,CAAEC,SAAU,mBCH/BC,G,MA9BE,WAAO,IAAD,EACmBjJ,mBAAS,IAD5B,mBACZkJ,EADY,KACCC,EADD,KAGnBjJ,qBAAU,WAONiJ,EAAe9H,KAChB,IAGH,IAAI+G,EAAQc,EAAYE,MAAM,GAAGC,UAAUvI,KAAI,SAAAwI,GAAI,OAC/C,sBAAKrI,UAAU,gBAA8B8C,GAAIuF,EAAKvF,GAAtD,UACI,sBAAK9C,UAAU,QAAf,UACI,sBAAMA,UAAU,QAAhB,eACA,sBAAMA,UAAU,WAAhB,SAA4BqI,EAAKvD,QACjC,sBAAM9E,UAAU,OAAhB,kBAEJ,qBAAKyH,IAAKY,EAAKxD,IAAKyD,IAAI,WANQD,EAAKvF,OAU7C,OACI,qBAAK9C,UAAU,WAAf,SAA2BiI,EAAYrD,OAAS,EAAIuC,EAAQ,gECFrDoB,EArBC,WAAO,IACX3J,EAASe,qBAAWjB,GAApBE,KAGR,OAFA4J,QAAQC,IAAI7J,EAAK8J,KAGb,eAAC,IAAD,WACI,cAAC,IAAD,CAAOjJ,OAAK,EAACD,KAAK,IAAImJ,UAAWX,IACjC,cAAC,IAAD,CAAOxI,KAAK,YAAYoJ,OAAQ,kBAC5B,2GAEJ,cAAC,IAAD,CAAOpJ,KAAK,aAAamJ,UAAWnC,IACnC5H,EAAO,cAAC,IAAD,CAAOY,KAAK,WAAWoJ,OAAQ,kBACnC,4DACI,KACR,cAAC,IAAD,CAAOA,OAAQ,kBACX,+DCxBD,MAA0B,oCC2B1BC,EAvBM,WAejB,OACI,qBAAKlD,MAdQ,CACbmD,gBAAiB,UACjB/H,MAAO,OACPC,OAAQ,SAWR,SACI,qBAAKyG,IAAKsB,EAAST,IAAI,gBAAgB3C,MAT9B,CACbqD,SAAU,QACVpG,IAAK,MACLH,KAAM,MACNwG,UAAW,8BCmBJC,EAxBH,WAAO,IAAD,EACkBnK,oBAAS,GAD3B,mBACToK,EADS,KACEC,EADF,KAShB,OANAnK,qBAAU,WACRoK,YAAW,WACTD,GAAa,KACZ,OACF,IAGD,mCACGD,EAAY,cAAC,EAAD,IACX,cAAC,EAAD,UACE,cAAC,IAAD,CAAQG,SAAUC,kBAAlB,SACE,sBAAKvJ,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,cCfRwJ,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT/C,MAAK,SAACoD,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BlC,QAAQC,IACN,+GAKEuB,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB5B,QAAQC,IAAI,sCAGRuB,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,WAO5BS,OAAM,SAACC,GACNtC,QAAQsC,MAAM,4CAA6CA,MC9FjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjE,MAAK,YAAkD,IAA/CkE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAAS3C,OACP,cAAC,IAAM4C,WAAP,UACE,cAAC,EAAD,MAEFpJ,SAASC,eAAe,SFSnB,SAAkB2H,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIwB,IAAIlC,kBAAwBG,OAAOC,SAASpF,MACpDmH,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOzG,iBAAiB,QAAQ,WAC9B,IAAM8G,EAAK,UAAMR,kBAAN,sBAEPC,IAgEV,SAAiCO,EAAOC,GAEtCjD,MAAMgD,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5B3E,MAAK,SAACC,GAEL,IAAM2E,EAAc3E,EAAS0E,QAAQE,IAAI,gBAEnB,MAApB5E,EAAS6E,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C9B,UAAUC,cAAc8B,MAAMhF,MAAK,SAACoD,GAClCA,EAAa6B,aAAajF,MAAK,WAC7B0C,OAAOC,SAASuC,eAKpBpC,EAAgBC,EAAOC,MAG1Ba,OAAM,WACLrC,QAAQC,IAAI,oEAtFV0D,CAAwBpC,EAAOC,GAI/BC,UAAUC,cAAc8B,MAAMhF,MAAK,WACjCwB,QAAQC,IACN,+GAMJqB,EAAgBC,EAAOC,OE/B/BoC,GAKArB,M","file":"static/js/main.51c7820c.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyA5kSJGlUmKC9PftAV8LyHcpdjoaOwKbJ8\",\r\n    authDomain: \"meme-generator-fe1c4.firebaseapp.com\",\r\n    projectId: \"meme-generator-fe1c4\",\r\n    storageBucket: \"meme-generator-fe1c4.appspot.com\",\r\n    messagingSenderId: \"888796383810\",\r\n    appId: \"1:888796383810:web:657b8ecffc3740a026fbdb\",\r\n    measurementId: \"G-8007NWQCGB\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport const signInWithGoogle = () => {\r\n    auth.signInWithPopup(provider);\r\n};","import React, { createContext, useEffect, useState } from \"react\";\r\nimport { auth } from \"../firebase\";\r\n\r\nexport const UserContext = createContext({ user: null });\r\n\r\nconst UserProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null)\r\n\r\n    useEffect(() => {\r\n        auth.onAuthStateChanged(userAuth => setUser(userAuth))\r\n    }, []);\r\n\r\n    return (\r\n        <UserContext.Provider value={{ user }}>\r\n            {children}\r\n        </UserContext.Provider>\r\n    );\r\n}\r\n\r\nexport default UserProvider;","import React, { useContext } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { UserContext } from '../../store/UserProvider';\r\nimport { auth, signInWithGoogle } from \"../../firebase\";\r\n\r\nimport './Header.css';\r\n\r\nconst list = [\r\n    { name: \"Start\", path: \"/\", exact: true },\r\n    { name: \"Top Memes\", path: \"/topmemes\" },\r\n    { name: \"Generator\", path: \"/generator\" },\r\n];\r\n\r\nconst Header = () => {\r\n    const { user } = useContext(UserContext);\r\n\r\n    const logInOut = () => {\r\n        if (!user) {\r\n            signInWithGoogle()\r\n        } else auth.signOut();\r\n    }\r\n\r\n    const menu = list.map(element => (\r\n        <li key={element.name}><NavLink to={element.path} exact={element.exact ? element.exact : false}>{element.name}</NavLink></li>\r\n    ))\r\n\r\n\r\n    return (\r\n        <header>\r\n            <button className=\"log\" onClick={logInOut}>{user ? 'Logout' : 'Sign in with Google'}</button>\r\n            <h1>Meme Generator</h1>\r\n            <nav className=\"main\">\r\n                <ul>\r\n                    {menu}\r\n                    {user ? <li key='profile'><NavLink to='/profile' exact={false}>User Profile</NavLink></li> : null}\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","let database = [];\r\n\r\nexport default database;","import React from 'react'\r\n\r\n//NEED HARD CSS - alpha version\r\n\r\nconst Form = ({ upperValue, bottomValue, textSize, handleChange }) => {\r\n    return (\r\n        <form>\r\n            <label>Add text: </label>\r\n            <br />\r\n            <input\r\n                type=\"text\"\r\n                name=\"upperText\"\r\n                placeholder=\"Upper Text\"\r\n                value={upperValue}\r\n                onChange={handleChange}\r\n            />\r\n            <input\r\n                type=\"text\"\r\n                name=\"bottomText\"\r\n                placeholder=\"Bottom Text\"\r\n                value={bottomValue}\r\n                onChange={handleChange}\r\n            />\r\n            <br />\r\n            <label>Font Size: </label>\r\n            <input\r\n                type=\"number\"\r\n                name=\"textSize\"\r\n                placeholder=\"Select font size\"\r\n                value={textSize}\r\n                onChange={handleChange} />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Form;","import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport '../meme.css';\r\n\r\nimport database from '../../../testDB';\r\n\r\nimport Form from './Form';\r\nimport { UserContext } from '../../../store/UserProvider';\r\n\r\nconst Meme = ({ selectedImage, width, height }) => {\r\n    //USER AUTHENTICATE:\r\n    const { user } = useContext(UserContext);\r\n\r\n    //STATES:\r\n\r\n    const [bottomText, setBottomText] = useState('');\r\n    const [upperText, setUpperText] = useState('');\r\n    const [textSize, setTextSize] = useState(50)\r\n\r\n    const [upperX, setUpperX] = useState(\"50%\");\r\n    const [upperY, setUpperY] = useState(\"10%\");\r\n    const [bottomX, setBottomX] = useState(\"50%\");\r\n    const [bottomY, setBottomY] = useState(\"90%\");\r\n\r\n    const [isGrabbed, setIsGrabbed] = useState(false);\r\n\r\n\r\n    //FORM EDIT:\r\n\r\n    const handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n\r\n        switch (name) {\r\n            case 'upperText':\r\n                setUpperText(value);\r\n                break;\r\n            case 'bottomText':\r\n                setBottomText(value);\r\n                break;\r\n            case 'textSize':\r\n                setTextSize(value);\r\n                break;\r\n            default:\r\n                alert(`Sorry, ${name} does not exist. Report this to us and we will check what happened.`);\r\n        }\r\n    }\r\n\r\n    //GRAB AND DROP FUNCTIONS:\r\n\r\n    //1. Movement of the text:\r\n    const handleMouseMove = useCallback((e) => {\r\n        if (isGrabbed) {\r\n            let rect = document.getElementById('svgImage').getBoundingClientRect();\r\n            const offsetX = e.clientX - rect.left;\r\n            const offsetY = e.clientY - rect.top;\r\n            if (e.target.id === \"uppertxt\") {\r\n                setUpperX(`${offsetX}px`);\r\n                setUpperY(`${offsetY}px`);\r\n            } else if (e.target.id === \"bottomtxt\") {\r\n                setBottomX(`${offsetX}px`);\r\n                setBottomY(`${offsetY}px`);\r\n            }\r\n        }\r\n    }, [isGrabbed]);\r\n\r\n    //2. Movement start:\r\n    const handleMouseDown = useCallback(() => {\r\n        setIsGrabbed(true)\r\n    }, [])\r\n\r\n    //3. Movement end:\r\n    const handleMouseUp = useCallback(() => {\r\n        setIsGrabbed(false)\r\n    }, [])\r\n\r\n\r\n    //4. useEffect hook - update of changing state:\r\n    useEffect(() => {\r\n        if (isGrabbed) document.addEventListener('mousemove', handleMouseMove);\r\n\r\n        return () => {\r\n            document.removeEventListener('mousemove', handleMouseMove);\r\n        }\r\n    }, [handleMouseMove, handleMouseUp, isGrabbed])\r\n\r\n\r\n    //5. Function which select action on created meme:\r\n    const actionOnMeme = (id, canvasdata) => {\r\n        if (id === 'download') {\r\n            const a = document.createElement(\"a\");\r\n            a.download = \"meme.png\";\r\n            a.href = canvasdata;\r\n            document.body.appendChild(a);\r\n            a.click();\r\n        } else if (id === 'post') {\r\n            //do zmiany z API - fetch\r\n            const newMeme = {\r\n                id: database.length,\r\n                url: canvasdata,\r\n                likes: 0\r\n            };\r\n            database.push(newMeme);\r\n        }\r\n    }\r\n\r\n    //Download and post meme function:\r\n    const manageMeme = (e) => {\r\n        const { id } = e.target;\r\n        const svg = document.getElementById(\"createdMeme\");\r\n        let svgData = new XMLSerializer().serializeToString(svg);\r\n        const canvas = document.createElement(\"canvas\");\r\n        canvas.setAttribute(\"id\", \"canvas\");\r\n        const svgSize = svg.getBoundingClientRect();\r\n        canvas.width = svgSize.width;\r\n        canvas.height = svgSize.height;\r\n        const img = document.createElement(\"img\");\r\n        img.setAttribute(\"src\", \"data:image/svg+xml;base64,\" + btoa(unescape(encodeURIComponent(svgData))));\r\n        img.onload = function () {\r\n            canvas.getContext(\"2d\").drawImage(img, 0, 0);\r\n            const canvasdata = canvas.toDataURL(\"image/png\");\r\n            actionOnMeme(id, canvasdata);\r\n        };\r\n    }\r\n\r\n    const textStyle = {\r\n        fontFamily: \"Impact\",\r\n        textTransform: \"uppercase\",\r\n        fill: \"#FFF\",\r\n        stroke: \"#000\",\r\n        userSelect: \"none\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"memegen\">\r\n            <Form upperValue={upperText} bottomValue={bottomText} textSize={textSize} handleChange={handleChange} />\r\n            <svg\r\n                id=\"createdMeme\"\r\n                width={width}\r\n                height={height}\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n                <image\r\n                    id=\"svgImage\"\r\n                    xlinkHref={selectedImage}\r\n                    height={height}\r\n                    width={width}\r\n                />\r\n                <text\r\n                    id=\"uppertxt\"\r\n                    style={{ ...textStyle, fontSize: `${textSize}px` }}\r\n                    x={upperX}\r\n                    y={upperY}\r\n                    dominantBaseline=\"middle\"\r\n                    textAnchor=\"middle\"\r\n                    onMouseDown={handleMouseDown}\r\n                    onMouseUp={handleMouseUp}\r\n                >\r\n                    {upperText}\r\n                </text>\r\n                <text\r\n                    id=\"bottomtxt\"\r\n                    style={{ ...textStyle, fontSize: `${textSize}px` }}\r\n                    x={bottomX}\r\n                    y={bottomY}\r\n                    dominantBaseline=\"middle\"\r\n                    textAnchor=\"middle\"\r\n                    onMouseDown={handleMouseDown}\r\n                    onMouseUp={handleMouseUp}\r\n                >\r\n                    {bottomText}\r\n                </text>\r\n            </svg>\r\n            <br />\r\n            <button id='download' onClick={manageMeme}>Download Meme</button>\r\n            <br />\r\n            { user ? <button id='post' onClick={manageMeme}>Post Meme</button> : null}\r\n        </ div >\r\n    )\r\n}\r\n\r\nexport default Meme;","import React from 'react';\r\n\r\nconst Images = ({ allMemeImg, selectImg }) => {\r\n    const allImages = allMemeImg.map(img => <p className=\"gallery-element\" key={img.id} onClick={selectImg} data-url={img.url}>{img.name}</p>)\r\n\r\n    return (\r\n        <div>\r\n            {allMemeImg.length > 0 ? allImages : <span>Something is wrong...</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Images;","import React, { useState, useEffect } from 'react';\r\n\r\nimport Meme from './subcomponents/Meme';\r\nimport Images from './subcomponents/Images';\r\n\r\nconst MemeGenerator = () => {\r\n    const [selectedImage, setSelectedImage] = useState('');\r\n    const [allMemeImg, setAllMemeImg] = useState([]);\r\n\r\n    const [selectedImageWidth, setSelectedImageWidth] = useState('')\r\n    const [selectedImageHeight, setSelectedImageHeight] = useState('')\r\n\r\n    useEffect(() => {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                const { memes } = response.data\r\n                setAllMemeImg(memes)\r\n            })\r\n    }, [])\r\n\r\n\r\n    const handleClick = (e) => {\r\n        const { url } = e.target.dataset;\r\n        const base64img = document.createElement(\"canvas\");\r\n        const baseImage = new Image();\r\n        baseImage.src = url;\r\n        baseImage.crossOrigin = \"anonymous\";\r\n        baseImage.onload = function () {\r\n            const wrh = baseImage.width / baseImage.height;\r\n            base64img.width = 700;\r\n            base64img.height = base64img.width / wrh;\r\n            const ctx = base64img.getContext(\"2d\");\r\n            ctx.drawImage(baseImage, 0, 0, base64img.width, base64img.height);\r\n            const dataURL = base64img.toDataURL(\"image/png\");\r\n            setSelectedImage(dataURL);\r\n            setSelectedImageWidth(`${base64img.width}px`);\r\n            setSelectedImageHeight(`${base64img.height}px`);\r\n            const chosen = document.querySelector('.maingen');\r\n            chosen.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='maingen'>\r\n            {selectedImage && selectedImageHeight ? <Meme selectedImage={selectedImage} width={selectedImageWidth} height={selectedImageHeight} /> : null}\r\n            <Images allMemeImg={allMemeImg} selectImg={handleClick} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MemeGenerator;","import React, { useState, useEffect } from 'react';\r\nimport './HomePage.css'\r\n\r\nimport database from '../../testDB';\r\n\r\n\r\nconst HomePage = () => {\r\n    const [postedMemes, setPostedMemes] = useState([])\r\n\r\n    useEffect(() => {\r\n        // fetch(database)\r\n        //     .then(response => response.json())\r\n        //     .then(response => {\r\n        //         const data = response.data\r\n        //         setPostedMemes(data)\r\n        //     })\r\n        setPostedMemes(database)\r\n    }, [])\r\n\r\n\r\n    let memes = postedMemes.slice(0).reverse().map(meme => (\r\n        <div className=\"memeContainer\" key={meme.id} id={meme.id}>\r\n            <div className=\"likes\">\r\n                <span className=\"minus\">-</span>\r\n                <span className=\"like-num\">{meme.likes}</span>\r\n                <span className=\"plus\">+</span>\r\n            </div>\r\n            <img src={meme.url} alt=\"meme\" />\r\n        </div>))\r\n\r\n\r\n    return (\r\n        <div className=\"HomePage\">{postedMemes.length > 0 ? memes : <p>Brak memów, przepraszamy</p>}</div>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, { useContext } from 'react'\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport { UserContext } from '../../store/UserProvider';\r\n\r\nimport MemeGenerator from '../MemeGenerator/MemeGenerator';\r\nimport HomePage from '../PortalPages/HomePage';\r\n\r\n\r\nconst Content = () => {\r\n    const { user } = useContext(UserContext);\r\n    console.log(user.uid)\r\n\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route path='/topmemes' render={() => (\r\n                <h2>Top memy - wyświetlamy memy posortowane po ilościu lajków</h2>\r\n            )} />\r\n            <Route path='/generator' component={MemeGenerator} />\r\n            {user ? <Route path='/profile' render={() => (\r\n                <h2>Profil użytkownika</h2>\r\n            )} /> : null}\r\n            <Route render={() => (\r\n                <h2>Strona nie istnieje...</h2>\r\n            )} />\r\n        </Switch>\r\n    )\r\n}\r\n\r\nexport default Content;","export default __webpack_public_path__ + \"static/media/loading.01b22d1d.gif\";","import React from 'react';\r\nimport loading from '../../img/Splash/loading.gif'\r\n\r\n\r\nconst SplashScreen = () => {\r\n\r\n    const divStyle = {\r\n        backgroundColor: '#0099AA',\r\n        width: '100%',\r\n        height: '100vh'\r\n    }\r\n\r\n    const imgStyle = {\r\n        position: 'fixed',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)'\r\n    }\r\n\r\n    return (\r\n        <div style={divStyle}>\r\n            <img src={loading} alt='splash-screen' style={imgStyle} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SplashScreen;","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport './App.css';\n\nimport UserProvider from './store/UserProvider';\n\nimport Header from './components/Header/Header';\nimport Content from './components/Content/Content';\nimport SplashScreen from './components/Content/SplashScreen';\n\n\nconst App = () => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setIsLoading(false)\n    }, 2000)\n  }, [])\n\n  return (\n    <>\n      {isLoading ? <SplashScreen /> :\n        <UserProvider>\n          <Router basename={process.env.PUBLIC_URL}>\n            <div className=\"App\">\n              <Header />\n              <Content />\n            </div>\n          </Router>\n        </UserProvider>\n      }\n    </>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}